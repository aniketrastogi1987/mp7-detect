name: CI Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:

    
env:
  ECS_SERVICE: patient-model-service-njm824u0                 # set this to your Amazon ECS service name
  ECS_CLUSTER: xgboost-ecr                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: patient-task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: patient-model-api           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  
jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install -r requirements/requirements.txt
    - name: Train and save pipeline
      run: python patient_model/train_pipeline.py
    - uses: actions/upload-artifact@v4
      with:
        name: my-trained-pipeline
        path: patient_model/trained_models/*.pkl
        retention-days: 1
  
  test:
    needs: train
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v4
      with:
        name: my-trained-pipeline
        path: patient_model/trained_models
    - name: Install dependencies
      run: pip install -r requirements/test_requirements.txt
    - name: Test with pytest
      run: pytest

  build:
    needs: [train, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v4
      with:
        name: my-trained-pipeline
        path: patient_model/trained_models
    - name: Install dependencies
      run: pip install --upgrade build
    - name: Build package
      run: python -m build
    - uses: actions/upload-artifact@v4
      with:
        name: my-build-package
        path: dist/*.whl
        retention-days: 1

  push-image-docker:
    needs: [train, test, build]
    runs-on: ubuntu-latest
    steps:
    - name: Repo Checkout
      uses: actions/checkout@v2

    - uses: actions/download-artifact@v4
      with:
        name: my-build-package
        path: patient_model_api

    - name: Login to Docker hub
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS_TOKEN }}
      run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 

    - name: Build the Docker image for Fastapi app
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      run: docker build . -f Dockerfile -t $DOCKER_USER/patient-gradio:latest

    - name: Push the Docker Image
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      run: docker push $DOCKER_USER/patient-gradio

    - name: Logout to Docker hub
      run: docker logout

  push-image-ecr:
    needs: [train, test, build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: actions/download-artifact@v4
      with:
        name: my-build-package
        path: patient_model_api
        
    - uses: actions/download-artifact@v4
      with:
        name: my-trained-pipeline
        path: patient_model/trained_models

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public
        
    - name: Build, Tag, and Push Docker image
      id: build-ecr-image
      env:
        REGISTRY: public.ecr.aws/k8f5x7g7
        REPOSITORY: aniketrastogi1987/aiml-mp-xgboost
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Debug information
        echo "Building image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
        
        # Build the docker image
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
        
        # Push both tagged versions
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:latest
        
        # Output the image URI for use in CD pipeline
        echo "IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
  
    - name: Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-ecr-image.outputs.IMAGE_URI }}
    
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
