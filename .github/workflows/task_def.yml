name: Task Def

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  authenticate:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
  task-def:
    needs: authenticate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials  # Need AWS credentials in this job too
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # First register the task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: patient-task-definition.json
          container-name: patient-model-api
          image: public.ecr.aws/k8f5x7g7/aniketrastogi1987/aiml-mp-xgboost:latest
      
      - name: Register task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_def_arn=${TASK_DEF_ARN}" >> $GITHUB_OUTPUT
      # Create ECS Cluster if it doesn't exist
      - name: Ensure ECS Cluster Exists
        run: |
          aws ecs describe-clusters --clusters xgboost-ecr || \
          aws ecs create-cluster --cluster-name xgboost-ecr